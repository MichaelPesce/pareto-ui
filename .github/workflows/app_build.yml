name: App build
run-name: PARETO UI Build
on:
  workflow_call:
    inputs:
      job-name:
        type: string
      os-version:
        type: string
        default: windows-latest
      project-pareto-repo:
        type: string
        default: project-pareto/project-pareto
      project-pareto-branch:
        type: string
        default: main
      project-pareto-version:
        type: string
        default: '1.1.0'
      package-build-number:
        type: string
      windows-installer-target:
        type: string
        default: nsis
    secrets:
      AZURE_KEY_VAULT_URI:
        required: false
      AZURE_CLIENT_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_CLIENT_SECRET:
        required: false
      AZURE_CERT_NAME:
        required: false
      APPLE_BUILD_CERTIFICATE_BASE64:
        required: false
      P12_PASSWORD:
        required: false
      KEYCHAIN_PASSWORD:
        required: false
      APPLE_ID:
        required: false
      APPLE_ID_PASSWORD:
        required: false
      NOTARIZE_TOOL:
        required: false
      TEAM_ID:
        required: false

defaults:
  run:
    # -l: use login shell (required when using Conda)
    shell: bash -l {0}

jobs:
  electron-build:
    name: ${{ inputs.job-name }}
    runs-on: ${{ inputs.os-version }}
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: environment.yml
          activate-environment: pareto-ui-env
          miniforge-version: latest
      
        ## install Azure signtool for windows builds
      - name: Install Azure Signtool
        if: runner.os == 'Windows'
        run: |
          dotnet tool install --global AzureSignTool
      
        ## handle Apple certificate, keychain setup for mac builds
      - name: Install the Apple certificate
        if: runner.os == 'macOS' && env.BUILD_CERTIFICATE_BASE64 != '' && env.P12_PASSWORD != '' && env.KEYCHAIN_PASSWORD != ''
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

        ## use this for naming package
      - name: Generate Package Build Number
        id: generate-build-number
        run: |
          if [ -z "${{ inputs.package-build-number }}" ]; then
            echo "build-number=$(date +'%y.%m.%d')" >> $GITHUB_OUTPUT
          else
            echo "build-number=${{ inputs.package-build-number }}" >> $GITHUB_OUTPUT
          fi

        ## Generate os name, artifact file name, extensions
        ## For build type of zip, we build it unpacked so it can be codesigned before being zipped up
      - name: Generate os name, file extension, artifact path
        id: dynamic-variables
        run: |
          if [ "${{ inputs.os-version }}" == "windows-latest" ]; then
            echo "os=win64" >> $GITHUB_OUTPUT
            if [ "${{ inputs.windows-installer-target }}" == "zip" ]; then
              echo "artifact-file-extension=zip" >> $GITHUB_OUTPUT
              echo "build-label=portable" >> $GITHUB_OUTPUT
              echo "build-target=dir" >> $GITHUB_OUTPUT
              echo "artifact-name=PARETO-UI_${{ steps.generate-build-number.outputs.build-number }}_win64_portable" >> $GITHUB_OUTPUT
              echo "final-artifact=PARETO-UI_${{ steps.generate-build-number.outputs.build-number }}_win64_portable" >> $GITHUB_OUTPUT
            elif [ "${{ inputs.windows-installer-target }}" == "portable" ]; then
              echo "artifact-file-extension=exe" >> $GITHUB_OUTPUT
              echo "build-label=portable" >> $GITHUB_OUTPUT
              echo "build-target=portable" >> $GITHUB_OUTPUT
              echo "artifact-name=PARETO-UI_${{ steps.generate-build-number.outputs.build-number }}_win64_portable" >> $GITHUB_OUTPUT
              echo "final-artifact=PARETO-UI_${{ steps.generate-build-number.outputs.build-number }}_win64_portable.exe" >> $GITHUB_OUTPUT
            else
              echo "artifact-file-extension=exe" >> $GITHUB_OUTPUT
              echo "build-label=nsis" >> $GITHUB_OUTPUT
              echo "build-target=nsis" >> $GITHUB_OUTPUT
              echo "artifact-name=PARETO-UI_${{ steps.generate-build-number.outputs.build-number }}_win64_nsis" >> $GITHUB_OUTPUT
              echo "final-artifact=PARETO-UI_${{ steps.generate-build-number.outputs.build-number }}_win64_nsis.exe" >> $GITHUB_OUTPUT
            fi
          else
            echo "os=arm64" >> $GITHUB_OUTPUT
            echo "artifact-file-extension=dmg" >> $GITHUB_OUTPUT
            echo "build-label=dmg" >> $GITHUB_OUTPUT
            echo "build-target=dmg" >> $GITHUB_OUTPUT
            echo "artifact-name=PARETO-UI_${{ steps.generate-build-number.outputs.build-number }}_arm64" >> $GITHUB_OUTPUT
            echo "final-artifact=PARETO-UI_${{ steps.generate-build-number.outputs.build-number }}_arm64.dmg" >> $GITHUB_OUTPUT
          fi
        
      - name: Update package.json with correct build version, name
        uses: restackio/update-json-file-action@2.1
        with:
          file: ./electron/package.json
          fields: "{\"version\": \"${{ steps.generate-build-number.outputs.build-number }}\", \"build.win.artifactName\": \"PARETO-UI_${{ steps.generate-build-number.outputs.build-number }}_${{ steps.dynamic-variables.outputs.os }}_${{ steps.dynamic-variables.outputs.build-label }}.exe\", \"build.mac.artifactName\": \"PARETO-UI_${{ steps.generate-build-number.outputs.build-number }}_${{ steps.dynamic-variables.outputs.os }}.${{ steps.dynamic-variables.outputs.build-target }}\", \"build.nsis.artifactName\": \"PARETO-UI_${{ steps.generate-build-number.outputs.build-number }}_${{ steps.dynamic-variables.outputs.os }}_${{ steps.dynamic-variables.outputs.build-label }}.exe\", \"build.dmg.artifactName\": \"PARETO-UI_${{ steps.generate-build-number.outputs.build-number }}_${{ steps.dynamic-variables.outputs.os }}.dmg\", \"build.win.target\": \"${{ steps.dynamic-variables.outputs.build-target }}\"}"

      - name: Install project pareto locally
        working-directory: ../
        run: git clone https://github.com/${{ inputs.project-pareto-repo }}.git && cd project-pareto && git fetch --all --tags && git checkout ${{ inputs.project-pareto-branch }} && pip install --progress-bar off .

      - name: install exact buld requirements
        working-directory: ./backend
        run: pip install -r requirements-build.txt

      - name: Add project pareto version to .env file
        working-directory: ./electron/ui
        run: |
            echo REACT_APP_PARETO_VERSION=${{ inputs.project-pareto-version }} >> .env
            
      - name: Add project pareto version to .env file
        working-directory: ./electron/ui
        run: |
            echo REACT_APP_BUILD_NUMBER=${{ steps.generate-build-number.outputs.build-number }} >> .env

      - name: Install Electron JS dependencies
        working-directory: ./electron
        run:  npm install

      - name: Install frontend JS dependencies
        working-directory: ./electron/ui
        run: npm clean-install

      - name: Get idaes extensions
        working-directory: backend/app
        run: |
          mkdir idaes_extensions
          idaes get-extensions --to .

      - name: Build Backend
        working-directory: ./electron
        run: npm run build-backend

      - name: Build Frontend
        working-directory: ./electron
        env:
          CI: false
        run: npm run build-frontend

      - name: Build ${{ steps.dynamic-variables.outputs.os }} Distribution
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          NOTARIZE_TOOL: ${{ secrets.NOTARIZE_TOOL }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        working-directory: ./electron
        run: |
          if [ "${{ steps.dynamic-variables.outputs.os }}" = "arm64" ]; then
            npm run electron-build-mac
          else
            npm run electron-build-win
          fi
      
        ## If building a zip, we build it unpacked so that it can be code signed. It is then zipped up as a github artifact
      - name: Sign Windows Distribution
        if: runner.os == 'Windows' && env.AZURE_KEY_VAULT_URI != '' && env.AZURE_CLIENT_ID != '' && env.AZURE_TENANT_ID != '' && env.AZURE_CLIENT_SECRET != '' && env.AZURE_CERT_NAME != ''
        env:
          AZURE_KEY_VAULT_URI: ${{ secrets.AZURE_KEY_VAULT_URI }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CERT_NAME: ${{ secrets.AZURE_CERT_NAME }}
        working-directory: electron/dist
        run: |
          if [ "${{ inputs.windows-installer-target }}" = "zip" ]; then
            echo "Signing individual files in dir target"
            mv win-unpacked ${{ steps.dynamic-variables.outputs.artifact-name }}
            cd ${{ steps.dynamic-variables.outputs.artifact-name }}
            ls -a

            echo "Recursively signing .exe files"
            find . -type f -name "*.exe" -exec azuresigntool sign \
              -kvu "${{ secrets.AZURE_KEY_VAULT_URI }}" \
              -kvi "${{ secrets.AZURE_CLIENT_ID }}" \
              -kvt "${{ secrets.AZURE_TENANT_ID }}" \
              -kvs "${{ secrets.AZURE_CLIENT_SECRET }}" \
              -kvc "${{ secrets.AZURE_CERT_NAME }}" \
              -tr http://timestamp.digicert.com \
              -v {} \;

            echo "Recursively signing .dll files"
            find . -type f -name "*.dll" -exec azuresigntool sign \
              -kvu "${{ secrets.AZURE_KEY_VAULT_URI }}" \
              -kvi "${{ secrets.AZURE_CLIENT_ID }}" \
              -kvt "${{ secrets.AZURE_TENANT_ID }}" \
              -kvs "${{ secrets.AZURE_CLIENT_SECRET }}" \
              -kvc "${{ secrets.AZURE_CERT_NAME }}" \
              -tr http://timestamp.digicert.com \
              -v {} \;
          else
            echo "Signing windows artifact"
            AzureSignTool sign -kvu "${{ secrets.AZURE_KEY_VAULT_URI }}" -kvi "${{ secrets.AZURE_CLIENT_ID }}" -kvt "${{ secrets.AZURE_TENANT_ID }}" -kvs "${{ secrets.AZURE_CLIENT_SECRET }}" -kvc ${{ secrets.AZURE_CERT_NAME }} -tr http://timestamp.digicert.com -v ${{ steps.dynamic-variables.outputs.artifact-name }}.exe
          fi

      - name: Upload artifact for ${{ steps.dynamic-variables.outputs.os }} build
        uses: actions/upload-artifact@v4
        if: always()
        with:
            name: ${{ steps.dynamic-variables.outputs.artifact-name }}
            path: electron/dist/${{ steps.dynamic-variables.outputs.final-artifact }}
